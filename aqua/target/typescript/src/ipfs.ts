/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.0-224
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';


// Services

 export interface IpfsDef {
     connect: (multiaddr: string, callParams: CallParams<'multiaddr'>) => {error:string;success:boolean};
get: (hash: string, callParams: CallParams<'hash'>) => {error:string;path:string;success:boolean};
get_external_api_multiaddr: (callParams: CallParams<null>) => {error:string;multiaddr:string;success:boolean};
get_external_swarm_multiaddr: (callParams: CallParams<null>) => {error:string;multiaddr:string;success:boolean};
get_from: (hash: string, external_multiaddr: string, callParams: CallParams<'hash' | 'external_multiaddr'>) => {error:string;path:string;success:boolean};
get_local_api_multiaddr: (callParams: CallParams<null>) => {error:string;multiaddr:string;success:boolean};
put: (file_path: string, callParams: CallParams<'file_path'>) => {error:string;hash:string;success:boolean};
set_external_api_multiaddr: (multiaddr: string, callParams: CallParams<'multiaddr'>) => {error:string;success:boolean};
set_external_swarm_multiaddr: (multiaddr: string, callParams: CallParams<'multiaddr'>) => {error:string;success:boolean};
set_local_api_multiaddr: (multiaddr: string, callParams: CallParams<'multiaddr'>) => {error:string;success:boolean};
set_timeout: (timeout_sec: number, callParams: CallParams<'timeout_sec'>) => void;
 }

 export function registerIpfs(service: IpfsDef): void;
export function registerIpfs(serviceId: string, service: IpfsDef): void;
export function registerIpfs(peer: FluencePeer, service: IpfsDef): void;
export function registerIpfs(peer: FluencePeer, serviceId: string, service: IpfsDef): void;
 export function registerIpfs(...args: any) {
    let peer: FluencePeer;
    let serviceId: any;
    let service: any;
    if (args[0] instanceof FluencePeer) {
        peer = args[0];
    } else {
        peer = FluencePeer.default;
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }  
 else {
     serviceId = "aqua-ipfs"
}

    if (!(args[0] instanceof FluencePeer) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

      peer.internals.callServiceHandler.use((req, resp, next) => {
          if (req.serviceId !== serviceId) {
              next();
              return;
          }
  
          
 if (req.fnName === 'connect') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         multiaddr: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.connect(req.args[0], callParams)

 }
    


 if (req.fnName === 'get') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         hash: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.get(req.args[0], callParams)

 }
    


 if (req.fnName === 'get_external_api_multiaddr') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.get_external_api_multiaddr(callParams)

 }
    


 if (req.fnName === 'get_external_swarm_multiaddr') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.get_external_swarm_multiaddr(callParams)

 }
    


 if (req.fnName === 'get_from') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         hash: req.tetraplets[0],external_multiaddr: req.tetraplets[1]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.get_from(req.args[0], req.args[1], callParams)

 }
    


 if (req.fnName === 'get_local_api_multiaddr') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.get_local_api_multiaddr(callParams)

 }
    


 if (req.fnName === 'put') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         file_path: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.put(req.args[0], callParams)

 }
    


 if (req.fnName === 'set_external_api_multiaddr') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         multiaddr: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.set_external_api_multiaddr(req.args[0], callParams)

 }
    


 if (req.fnName === 'set_external_swarm_multiaddr') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         multiaddr: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.set_external_swarm_multiaddr(req.args[0], callParams)

 }
    


 if (req.fnName === 'set_local_api_multiaddr') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         multiaddr: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.set_local_api_multiaddr(req.args[0], callParams)

 }
    


 if (req.fnName === 'set_timeout') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         timeout_sec: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 service.set_timeout(req.args[0], callParams); resp.result = {}

 }
    
  
          next();
      });
 }
      

// Functions

